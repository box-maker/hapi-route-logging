{"version":3,"sources":["../src/index.js"],"names":["optionsSchema","showRoutes","boolean","default","showRoutesList","checkUpgrade","register","server","options","next","checkOptions","validate","error","value","on","console","log","introMessage","info","uri","quitText","quitMessage","bgYellow","black","serverHapiVersion","version","then","gt","bgRed","red","request","date","Date","received","dateText","toLocaleDateString","toLocaleTimeString","infoText","green","method","toUpperCase","url","path","statusCode","typeText","errorText","response","parseInt","source","message","blue","protocol","err","totalTime","responded","totalTimeText","output","bold","italic","underline","attributes","pkg","module","exports"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA,MAAMA,gBAAgB;AACpBC,cAAY,cAAIC,OAAJ,GAAcC,OAAd,CAAsB,IAAtB,CADQ;AAEpBC,kBAAgB,cAAIF,OAAJ,GAAcC,OAAd,CAAsB,KAAtB,CAFI;AAGpBE,gBAAc,cAAIH,OAAJ,GAAcC,OAAd,CAAsB,KAAtB;AAHM,CAAtB;;AAMA,SAASG,QAAT,CAAkBC,MAAlB,EAA0BC,OAA1B,EAAmCC,IAAnC,EAAyC;AACvC,QAAMC,eAAe,cAAIC,QAAJ,CAAaH,OAAb,EAAsBR,aAAtB,CAArB;AACA,MAAIU,aAAaE,KAAjB,EAAwB;AACtB,UAAMF,aAAaE,KAAnB;AACD;AACDJ,YAAUE,aAAaG,KAAvB;;AAEAN,SAAOO,EAAP,CAAU,OAAV,EAAmB,MAAM;AACvB,QAAIN,QAAQJ,cAAZ,EAA4B;AAC1B,mCAAaG,MAAb;AACD;;AAEDQ,YAAQC,GAAR,CAAY,IAAZ;AACA,UAAMC,eAAgB,qBAAoBV,OAAOW,IAAP,CAAYC,GAAI,oBAA1D;AACA,UAAMC,WAAW,QAAjB;AACA,UAAMC,cAAe,wBAAuB,gBAAMC,QAAN,CAAeC,KAAf,CAAqBH,QAArB,CAA+B,GAA3E;AACA,UAAMI,oBAAoBjB,OAAOkB,OAAjC;AACA,QAAIjB,QAAQH,YAAZ,EAA0B;AACxB,mCAAc,MAAd,EAAsBqB,IAAtB,CAA2BD,WAAW;AACpC,YAAI,iBAAOE,EAAP,CAAUF,OAAV,EAAmBD,iBAAnB,CAAJ,EAA2C;AACzCT,kBAAQC,GAAR,CAAa,GAAEC,YAAa,IAAG,gBAAMW,KAAN,CAAYJ,iBAAZ,CAA+B,EAA9D;AACAT,kBAAQC,GAAR,CAAY,gBAAMa,GAAN,CAAW,yCAAwCJ,OAAQ,EAA3D,CAAZ;AACD,SAHD,MAGO;AACLV,kBAAQC,GAAR,CAAa,GAAEC,YAAa,IAAGO,iBAAkB,EAAjD;AACD;AACDT,gBAAQC,GAAR,CAAYK,WAAZ;AACD,OARD;AASD,KAVD,MAUO;AACLN,cAAQC,GAAR,CAAa,GAAEC,YAAa,IAAGO,iBAAkB,EAAjD;AACAT,cAAQC,GAAR,CAAYK,WAAZ;AACD;AACF,GAxBD;;AA0BA,MAAIb,QAAQP,UAAZ,EAAwB;AACtBM,WAAOO,EAAP,CAAU,UAAV,EAAsBgB,WAAW;AAC/B;AACA,YAAMC,OAAO,IAAIC,IAAJ,CAASF,QAAQZ,IAAR,CAAae,QAAtB,CAAb;AACA,YAAMC,WAAY,IAAGH,KAAKI,kBAAL,EAA0B,IAAGJ,KAAKK,kBAAL,EAA0B,GAA5E;;AAEA,YAAMC,WAAW,gBAAMC,KAAN,CAAa,IAAGR,QAAQS,MAAR,CAAeC,WAAf,EAA6B,IAAGV,QAAQW,GAAR,CAAYC,IAAK,GAAjE,CAAjB;;AAEA,UAAIC,UAAJ;AACA,UAAIC,QAAJ;AACA,UAAIC,YAAY,IAAhB;AACA,UAAI;AACFF,qBAAab,QAAQgB,QAAR,CAAiBH,UAA9B;AACA,YAAII,SAASJ,UAAT,EAAqB,EAArB,KAA4B,GAAhC,EAAqC;AACnCA,uBAAa,gBAAMpB,KAAN,CAAYK,KAAZ,CAAkBe,UAAlB,CAAb;AACAC,qBAAW,gBAAMf,GAAN,CAAU,OAAV,CAAX;AACAgB,sBAAYf,QAAQgB,QAAR,CAAiBE,MAAjB,CAAwBC,OAApC;AACD,SAJD,MAIO;AACLL,qBAAW,gBAAMM,IAAN,CAAW3C,OAAOW,IAAP,CAAYiC,QAAZ,CAAqBX,WAArB,EAAX,CAAX;AACD;AACF,OATD,CASE,OAAOY,GAAP,EAAY;AACZT,qBAAa,EAAb;AACD;;AAED,YAAMU,YAAY,IAAIrB,IAAJ,CAASF,QAAQZ,IAAR,CAAaoC,SAAtB,IAAmC,IAAItB,IAAJ,CAASF,QAAQZ,IAAR,CAAae,QAAtB,CAArD;AACA,YAAMsB,gBAAgB,gBAAM1B,GAAN,CAAW,GAAEwB,SAAU,IAAvB,CAAtB;;AAEA,YAAMG,SAAU,GAAEtB,QAAS,KAAIU,QAAS,KAAIP,QAAS,IAAGM,UAAW,IAAGY,aAAc,EAApF;AACAxC,cAAQC,GAAR,CAAYwC,MAAZ;AACA,UAAIX,SAAJ,EAAe;AACb9B,gBAAQH,KAAR,CAAe,KAAI,gBAAM6C,IAAN,CAAW,OAAX,CAAoB,KAAI,gBAAMC,MAAN,CAAaC,SAAb,CAAuBd,SAAvB,CAAkC,EAA7E;AACD;AACF,KA/BD;AAgCD;;AAED,SAAOpC,MAAP;AACD;;AAEDH,SAASsD,UAAT,GAAsB;AACpBC;AADoB,CAAtB;;AAIAC,OAAOC,OAAP,GAAiBzD,QAAjB","file":"index.js","sourcesContent":["'use strict';\n\nimport chalk from 'chalk';\nimport Joi from 'joi';\nimport latestVersion from 'latest-version';\nimport semver from 'semver';\n\nimport packageJson from '../package.json';\nimport {formatRoutes} from './route-list';\n\nconst optionsSchema = {\n  showRoutes: Joi.boolean().default(true),\n  showRoutesList: Joi.boolean().default(false),\n  checkUpgrade: Joi.boolean().default(false)\n};\n\nfunction register(server, options, next) {\n  const checkOptions = Joi.validate(options, optionsSchema);\n  if (checkOptions.error) {\n    throw checkOptions.error;\n  }\n  options = checkOptions.value;\n\n  server.on('start', () => {\n    if (options.showRoutesList) {\n      formatRoutes(server);\n    }\n\n    console.log('\\n');\n    const introMessage = `Server running at ${server.info.uri} with Hapi version`;\n    const quitText = 'CTRL-C';\n    const quitMessage = `Quit the server with ${chalk.bgYellow.black(quitText)}.`;\n    const serverHapiVersion = server.version;\n    if (options.checkUpgrade) {\n      latestVersion('hapi').then(version => {\n        if (semver.gt(version, serverHapiVersion)) {\n          console.log(`${introMessage} ${chalk.bgRed(serverHapiVersion)}`);\n          console.log(chalk.red(`\\t Upgrade Hapi.js, latest version is ${version}`));\n        } else {\n          console.log(`${introMessage} ${serverHapiVersion}`);\n        }\n        console.log(quitMessage);\n      });\n    } else {\n      console.log(`${introMessage} ${serverHapiVersion}`);\n      console.log(quitMessage);\n    }\n  });\n\n  if (options.showRoutes) {\n    server.on('response', request => {\n      // TODO: Support multiple connections (https://hapijs.com/api#serverconnections)\n      const date = new Date(request.info.received);\n      const dateText = `[${date.toLocaleDateString()} ${date.toLocaleTimeString()}]`;\n\n      const infoText = chalk.green(`\"${request.method.toUpperCase()} ${request.url.path}\"`);\n\n      let statusCode;\n      let typeText;\n      let errorText = null;\n      try {\n        statusCode = request.response.statusCode;\n        if (parseInt(statusCode, 10) >= 400) {\n          statusCode = chalk.black.bgRed(statusCode);\n          typeText = chalk.red('ERROR');\n          errorText = request.response.source.message;\n        } else {\n          typeText = chalk.blue(server.info.protocol.toUpperCase());\n        }\n      } catch (err) {\n        statusCode = '';\n      }\n\n      const totalTime = new Date(request.info.responded) - new Date(request.info.received);\n      const totalTimeText = chalk.red(`${totalTime}ms`);\n\n      const output = `${dateText} [${typeText}] ${infoText} ${statusCode} ${totalTimeText}`;\n      console.log(output);\n      if (errorText) {\n        console.error(`\\t${chalk.bold('Error')}: ${chalk.italic.underline(errorText)}`);\n      }\n    });\n  }\n\n  return next();\n}\n\nregister.attributes = {\n  pkg: packageJson\n};\n\nmodule.exports = register;\n"]}