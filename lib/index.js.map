{"version":3,"sources":["../src/index.js"],"names":["register","server","options","next","on","console","log","info","uri","version","italic","black","bgYellow","request","date","Date","created","dateText","toLocaleDateString","toLocaleTimeString","infoText","green","method","toUpperCase","url","path","statusCode","typeText","errorText","response","parseInt","bgRed","red","source","message","blue","err","totalTime","responded","received","totalTimeText","output","error","bold","underline","attributes","pkg","module","exports"],"mappings":"AAAA;;AAEA;;;;AAEA;;;;;;AAEA,SAASA,QAAT,CAAkBC,MAAlB,EAA0BC,OAA1B,EAAmCC,IAAnC,EAAyC;AACvCF,SAAOG,EAAP,CAAU,OAAV,EAAmB,MAAM;AACvBC,YAAQC,GAAR,CAAa,qBAAoBL,OAAOM,IAAP,CAAYC,GAAI,sBAAqBP,OAAOQ,OAAQ,EAArF;AACAJ,YAAQC,GAAR,CAAa,wBAAuB,gBAAMI,MAAN,CAAaC,KAAb,CAAmBC,QAAnB,CAA4B,WAA5B,CAAyC,GAA7E;AACD,GAHD;AAIAX,SAAOG,EAAP,CAAU,UAAV,EAAsBS,WAAW;AAC/B,UAAMC,OAAO,IAAIC,IAAJ,CAASF,QAAQZ,MAAR,CAAeM,IAAf,CAAoBS,OAA7B,CAAb;AACA,UAAMC,WAAY,IAAGH,KAAKI,kBAAL,EAA0B,IAAGJ,KAAKK,kBAAL,EAA0B,GAA5E;;AAEA,UAAMC,WAAW,gBAAMC,KAAN,CAAa,IAAGR,QAAQS,MAAR,CAAeC,WAAf,EAA6B,IAAGV,QAAQW,GAAR,CAAYC,IAAK,GAAjE,CAAjB;;AAEA,QAAIC,UAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,YAAY,IAAhB;AACA,QAAI;AACFF,mBAAab,QAAQgB,QAAR,CAAiBH,UAA9B;AACA,UAAII,SAASJ,UAAT,EAAqB,EAArB,KAA4B,GAAhC,EAAqC;AACnCA,qBAAa,gBAAMf,KAAN,CAAYoB,KAAZ,CAAkBL,UAAlB,CAAb;AACAC,mBAAW,gBAAMK,GAAN,CAAU,OAAV,CAAX;AACAJ,oBAAYf,QAAQgB,QAAR,CAAiBI,MAAjB,CAAwBC,OAApC;AACD,OAJD,MAIO;AACLP,mBAAW,gBAAMQ,IAAN,CAAW,MAAX,CAAX;AACD;AACF,KATD,CASE,OAAOC,GAAP,EAAY;AACZV,mBAAa,EAAb;AACD;;AAED,UAAMW,YAAY,IAAItB,IAAJ,CAASF,QAAQN,IAAR,CAAa+B,SAAtB,IAAmC,IAAIvB,IAAJ,CAASF,QAAQN,IAAR,CAAagC,QAAtB,CAArD;AACA,UAAMC,gBAAgB,gBAAMR,GAAN,CAAW,GAAEK,SAAU,IAAvB,CAAtB;;AAEA,UAAMI,SAAU,GAAExB,QAAS,KAAIU,QAAS,KAAIP,QAAS,IAAGM,UAAW,IAAGc,aAAc,EAApF;AACAnC,YAAQC,GAAR,CAAYmC,MAAZ;AACA,QAAIb,SAAJ,EAAe;AACbvB,cAAQqC,KAAR,CAAe,KAAI,gBAAMC,IAAN,CAAW,OAAX,CAAoB,KAAI,gBAAMjC,MAAN,CAAakC,SAAb,CAAuBhB,SAAvB,CAAkC,EAA7E;AACD;AACF,GA9BD;AA+BA,SAAOzB,MAAP;AACD;;AAEDH,SAAS6C,UAAT,GAAsB;AACpBC;AADoB,CAAtB;;AAIAC,OAAOC,OAAP,GAAiBhD,QAAjB","file":"index.js","sourcesContent":["'use strict';\n\nimport chalk from 'chalk';\n\nimport packageJson from '../package.json';\n\nfunction register(server, options, next) {\n  server.on('start', () => {\n    console.log(`Server running at ${server.info.uri} with Hapi version ${server.version}`);\n    console.log(`Quit the server with ${chalk.italic.black.bgYellow('CONTROL-C')}.`);\n  });\n  server.on('response', request => {\n    const date = new Date(request.server.info.created);\n    const dateText = `[${date.toLocaleDateString()} ${date.toLocaleTimeString()}]`;\n\n    const infoText = chalk.green(`\"${request.method.toUpperCase()} ${request.url.path}\"`);\n\n    let statusCode;\n    let typeText;\n    let errorText = null;\n    try {\n      statusCode = request.response.statusCode;\n      if (parseInt(statusCode, 10) >= 400) {\n        statusCode = chalk.black.bgRed(statusCode);\n        typeText = chalk.red('ERROR');\n        errorText = request.response.source.message;\n      } else {\n        typeText = chalk.blue('HTTP');\n      }\n    } catch (err) {\n      statusCode = '';\n    }\n\n    const totalTime = new Date(request.info.responded) - new Date(request.info.received);\n    const totalTimeText = chalk.red(`${totalTime}ms`);\n\n    const output = `${dateText} [${typeText}] ${infoText} ${statusCode} ${totalTimeText}`;\n    console.log(output);\n    if (errorText) {\n      console.error(`\\t${chalk.bold('Error')}: ${chalk.italic.underline(errorText)}`);\n    }\n  });\n  return next();\n}\n\nregister.attributes = {\n  pkg: packageJson\n};\n\nmodule.exports = register;\n"]}